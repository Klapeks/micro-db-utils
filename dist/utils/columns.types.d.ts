import mongoose from "mongoose";
import { EntitySchemaColumnOptions, EntitySchemaOptions } from "typeorm";
export type RequiredColumns<T> = Required<EntitySchemaOptions<T>['columns']>;
export type RequiredMongoColumns<T> = Required<mongoose.Schema<T>>;
export declare function createRelation(target: string, type: "one-to-many" | "one-to-one", inverseSide: string, cascade?: boolean): {
    target: string;
    type: "one-to-many" | "one-to-one";
    cascade: boolean;
    inverseSide: string;
};
export declare const FloatingColumn: EntitySchemaColumnOptions;
export declare const NullableFloatingColumn: {
    default: null;
    nullable: boolean;
    primary?: boolean | undefined;
    objectId?: boolean | undefined;
    createDate?: boolean | undefined;
    updateDate?: boolean | undefined;
    deleteDate?: boolean | undefined;
    version?: boolean | undefined;
    treeChildrenCount?: boolean | undefined;
    treeLevel?: boolean | undefined;
    virtualProperty?: boolean | undefined;
    type: import("typeorm").ColumnType;
    name?: string | undefined;
    length?: string | number | undefined;
    width?: number | undefined;
    readonly?: boolean | undefined;
    update?: boolean | undefined;
    select?: boolean | undefined;
    insert?: boolean | undefined;
    generated?: true | "uuid" | "increment" | "rowid" | undefined;
    unique?: boolean | undefined;
    columnDefinition?: string | undefined;
    comment?: string | undefined;
    onUpdate?: string | undefined;
    precision?: number | undefined;
    scale?: number | undefined;
    zerofill?: boolean | undefined;
    unsigned?: boolean | undefined;
    charset?: string | undefined;
    collation?: string | undefined;
    enum?: Object | any[] | undefined;
    enumName?: string | undefined;
    asExpression?: string | undefined;
    generatedType?: "VIRTUAL" | "STORED" | undefined;
    hstoreType?: "string" | "object" | undefined;
    array?: boolean | undefined;
    transformer?: import("typeorm").ValueTransformer | import("typeorm").ValueTransformer[] | undefined;
    primaryKeyConstraintName?: string | undefined;
    foreignKey?: import("typeorm/entity-schema/EntitySchemaColumnForeignKeyOptions").EntitySchemaColumnForeignKeyOptions | undefined;
    query?: ((alias: string) => string) | undefined;
    spatialFeatureType?: "Point" | "LineString" | "Polygon" | "MultiPoint" | "MultiLineString" | "MultiPolygon" | "GeometryCollection" | undefined;
    srid?: number | undefined;
};
export declare const Float64Column: EntitySchemaColumnOptions;
export declare const NullableFloat64Column: {
    default: null;
    nullable: boolean;
    primary?: boolean | undefined;
    objectId?: boolean | undefined;
    createDate?: boolean | undefined;
    updateDate?: boolean | undefined;
    deleteDate?: boolean | undefined;
    version?: boolean | undefined;
    treeChildrenCount?: boolean | undefined;
    treeLevel?: boolean | undefined;
    virtualProperty?: boolean | undefined;
    type: import("typeorm").ColumnType;
    name?: string | undefined;
    length?: string | number | undefined;
    width?: number | undefined;
    readonly?: boolean | undefined;
    update?: boolean | undefined;
    select?: boolean | undefined;
    insert?: boolean | undefined;
    generated?: true | "uuid" | "increment" | "rowid" | undefined;
    unique?: boolean | undefined;
    columnDefinition?: string | undefined;
    comment?: string | undefined;
    onUpdate?: string | undefined;
    precision?: number | undefined;
    scale?: number | undefined;
    zerofill?: boolean | undefined;
    unsigned?: boolean | undefined;
    charset?: string | undefined;
    collation?: string | undefined;
    enum?: Object | any[] | undefined;
    enumName?: string | undefined;
    asExpression?: string | undefined;
    generatedType?: "VIRTUAL" | "STORED" | undefined;
    hstoreType?: "string" | "object" | undefined;
    array?: boolean | undefined;
    transformer?: import("typeorm").ValueTransformer | import("typeorm").ValueTransformer[] | undefined;
    primaryKeyConstraintName?: string | undefined;
    foreignKey?: import("typeorm/entity-schema/EntitySchemaColumnForeignKeyOptions").EntitySchemaColumnForeignKeyOptions | undefined;
    query?: ((alias: string) => string) | undefined;
    spatialFeatureType?: "Point" | "LineString" | "Polygon" | "MultiPoint" | "MultiLineString" | "MultiPolygon" | "GeometryCollection" | undefined;
    srid?: number | undefined;
};
